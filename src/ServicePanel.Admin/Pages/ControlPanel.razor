@page "/control-panel/{AddressListJson?}"
@using System.ServiceProcess
@inject NavigationManager Navigation
@inject ServiceControlService Service
@inject IDialogService DialogService

@if (selectedItems.Count > 0)
{
    <MudButtonGroup OverrideStyles="false">
        <MudTooltip Text="启动" Placement="Placement.Right">
            <MudButton Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.NotStarted"
                       Disabled="DisabledStart()"
                       OnClick="() => StartService()">
                @if (selectedItems.Any(p => p.Processing))
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                }
            </MudButton>
        </MudTooltip>
        <MudTooltip Text="停止" Placement="Placement.Right">
            <MudButton Color="Color.Error"
                       StartIcon="@Icons.Material.Filled.Stop"
                       Disabled="DisabledStop()"
                       OnClick="() => StopService()">
                @if (selectedItems.Any(p => p.Processing))
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                }
            </MudButton>
        </MudTooltip>
        <MudTooltip Text="更新" Placement="Placement.Right">
            <MudButton Color="Color.Success"
                       StartIcon="@Icons.Material.Filled.Update"
                       OnClick="() => UpdateService(selectedItems)">
                @if (selectedItems.Any(p => p.Processing))
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                }
            </MudButton>
        </MudTooltip>
    </MudButtonGroup>
}

<MudTabs Outlined="true">
    <MudTabPanel Text="服务" Icon="@Icons.Material.Filled.DesktopWindows">
        <MudTable Items="@services"
                  Hover="true"
                  Striped="true"
                  Dense="true"
                  MultiSelection="true"
                  SelectOnRowClick="false"
        @bind-SelectedItems="selectedItems"
                  Filter="p => FilterFunc(p, searchString)"
                  RowsPerPage="50"
                  FixedHeader="true"
                  FixedFooter="true"
                  Height="calc(100vh - 190px)"
                  LoadingProgressColor="Color.Info">
            <ToolBarContent>
                <MudText Typo="Typo.h6">@string.Join(",", AddressList)</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<ServiceInfo, object>(x=>x.ServiceName)">名称</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ServiceInfo, object>(x=>x.DisplayName)">描述</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ServiceInfo, object>(x=>x.Status)">状态</MudTableSortLabel></MudTh>
                <MudTh>操作</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="名称">@context.ServiceName</MudTd>
                <MudTd DataLabel="描述">@context.DisplayName</MudTd>
                <MudTd DataLabel="状态">@context.Status</MudTd>
                <MudTd DataLabel="操作">
                    <MudButtonGroup OverrideStyles="false">
                        <MudTooltip Text="启动" Placement="Placement.Right">
                            <MudButton Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.NotStarted"
                                       Disabled="DisabledStart(context)"
                                       OnClick="() => StartService(context)">
                                @if (context.Processing)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                }
                            </MudButton>
                        </MudTooltip>
                        <MudTooltip Text="停止" Placement="Placement.Right">
                            <MudButton Color="Color.Error"
                                       StartIcon="@Icons.Material.Filled.Stop"
                                       Disabled="DisabledStop(context)"
                                       OnClick="() => StopService(context)">
                                @if (context.Processing)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                }
                            </MudButton>
                        </MudTooltip>
                        <MudTooltip Text="更新" Placement="Placement.Right">
                            <MudButton Color="Color.Success"
                                       StartIcon="@Icons.Material.Filled.Update"
                                       OnClick="() => UpdateService(context)">
                                @if (context.Processing)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                }
                            </MudButton>
                        </MudTooltip>
                    </MudButtonGroup>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }" />
            </PagerContent>
        </MudTable>
    </MudTabPanel>
    <MudTabPanel Text="详细信息" Icon="@Icons.Material.Filled.Dialpad">
        <MudTable Items="@services"
                  Hover="true"
                  Striped="true"
                  Dense="true"
                  MultiSelection="true"
                  SelectOnRowClick="false"
                  HorizontalScrollbar="true"
                  @bind-SelectedItems="selectedItems"
                  Filter="p => FilterFunc(p, searchString)"
                  RowsPerPage="50"
                  FixedHeader="true"
                  FixedFooter="true"
                  Height="calc(100vh - 190px)"
                  LoadingProgressColor="Color.Info">
            <ToolBarContent>
                <MudText Typo="Typo.h6">@string.Join(",", AddressList)</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<ServiceInfo, object>(x=>x.ServiceName)">名称</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ServiceInfo, object>(x=>x.Pid)">PID</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ServiceInfo, object>(x=>x.DisplayName)">描述</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ServiceInfo, object>(x=>x.Status)">状态</MudTableSortLabel></MudTh>
                <MudTh>启动类型</MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ServiceInfo, object>(x=>x.UpdateTime)">更新时间</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ServiceInfo, object>(x=>x.MemoryInfo)">内存</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ServiceInfo, object>(x=>x.ThreadCount)">线程</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ServiceInfo, object>(x=>x.ExePath)">路径</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="名称">@context.ServiceName</MudTd>
                <MudTd DataLabel="PID">@context.Pid</MudTd>
                <MudTd DataLabel="描述">@context.DisplayName</MudTd>
                <MudTd DataLabel="状态">@context.Status</MudTd>
                <MudTd DataLabel="启动类型">@context.StartType</MudTd>
                <MudTd DataLabel="更新时间">@context.UpdateTime</MudTd>
                <MudTd DataLabel="内存">@(Math.Round((double)context.MemoryInfo / 1024 / 1024, 1) + " MB")</MudTd>
                <MudTd DataLabel="线程">@context.ThreadCount</MudTd>
                <MudTd DataLabel="路径">@context.ExePath</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }" />
            </PagerContent>
        </MudTable>
    </MudTabPanel>
</MudTabs>

@code {
    [Parameter] public string AddressListJson { get; set; }

    private string[] AddressList => Deserialize(AddressListJson);

    private string searchString = "";
    private HashSet<ServiceInfo> selectedItems = new HashSet<ServiceInfo>();
    private List<ServiceInfo> services = new List<ServiceInfo>();
    private List<MachineInfo> machineInfos;

    protected override async Task OnInitializedAsync()
    {
        machineInfos = await Service.GetMachineInfos(AddressList);
        foreach (var machineInfo in machineInfos)
        {
            var serviceInfos = await Service.GetAllServices(machineInfo.IP, machineInfo.ConnectionId);
            services.AddRange(serviceInfos);
        }
    }

    private bool FilterFunc(ServiceInfo element, string searchString)
    {
        if (element == null)
            return false;
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        var searchArray = searchString.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        List<bool> results = new List<bool>();
        foreach (var str in searchArray)
        {
            var filterResult = false;
            if (element.IP.Contains(str, StringComparison.OrdinalIgnoreCase))
                filterResult = true;
            if (element.ServiceName.Contains(str, StringComparison.OrdinalIgnoreCase))
                filterResult = true;
            if (element.DisplayName.Contains(str, StringComparison.OrdinalIgnoreCase))
                filterResult = true;
            if (element.ExePath.Contains(str, StringComparison.OrdinalIgnoreCase))
                filterResult = true;
            if (element.Status.ToString().Contains(str, StringComparison.OrdinalIgnoreCase))
                filterResult = true;
            if (element.StartType.ToString().Contains(str, StringComparison.OrdinalIgnoreCase))
                filterResult = true;
            results.Add(filterResult);
        }

        return results.All(p => p == true);
    }

    private bool DisabledStart(ServiceInfo serviceInfo)
    {
        return !serviceInfo.CanStart || serviceInfo.Processing;
    }

    private bool DisabledStop(ServiceInfo serviceInfo)
    {
        return !serviceInfo.CanStop || serviceInfo.Processing;
    }

    private async Task StartService(ServiceInfo serviceInfo)
    {
        await ControlService(serviceInfo, ControlType.Start);
    }

    private async Task StopService(ServiceInfo serviceInfo)
    {
        await ControlService(serviceInfo, ControlType.Stop);
    }

    private bool DisabledStart()
    {
        return selectedItems.Any(p => DisabledStart(p));
    }

    private bool DisabledStop()
    {
        return selectedItems.Any(p => DisabledStop(p));
    }

    private async Task StartService()
    {
        foreach (var serviceInfo in selectedItems)
        {
            await ControlService(serviceInfo, ControlType.Start);
        }
    }

    private async Task StopService()
    {
        foreach (var serviceInfo in selectedItems)
        {
            await ControlService(serviceInfo, ControlType.Stop);
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="serviceInfo"></param>
    /// <returns></returns>
    private async Task ControlService(ServiceInfo serviceInfo, ControlType controlType)
    {
        serviceInfo.Processing = true;
        var connectionId = machineInfos.FirstOrDefault(p => p.IP == serviceInfo.IP)?.ConnectionId;
        var command = new ControlCommand
        {
                ConnectionId = connectionId,
            ControlType = controlType,
            ServiceName = serviceInfo.ServiceName
        };
        var result = await Service.ControlService(command);

        services = await Service.GetAllServices(serviceInfo.IP, connectionId);
        serviceInfo.Processing = false;

        if (!result.Success)
        {
            Snackbar.Add(result.Message, Severity.Error);
        }
    }

    private async Task UpdateService(ServiceInfo serviceInfo)
    {
        await UpdateService(new HashSet<ServiceInfo> { serviceInfo });
    }

    private async Task UpdateService(HashSet<ServiceInfo> serviceInfos)
    {
        var parameters = new DialogParameters();
        parameters.Add("ServiceInfos", serviceInfos);

        var options = new DialogOptions() { CloseButton = true, FullWidth = true };
        var dialog = DialogService.Show<ServiceUpdateDialog>($"", parameters, options);

        var result = await dialog.Result;
        foreach (var item in selectedItems)
        {
            var infos = await Service.GetAllServices(item.IP, item.ConnectionId);
            services.AddRange(infos);
        }
    }

    static string[] Deserialize(string source)
        => System.Text.Json.JsonSerializer.Deserialize<string[]>(System.Net.WebUtility.UrlDecode(source));
}
