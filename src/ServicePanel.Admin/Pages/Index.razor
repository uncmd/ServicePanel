@page "/"
@implements IDisposable
@using System.ServiceProcess
@inject NavigationManager Navigation
@inject ServiceControlService ControlService
@inject IDialogService DialogService

@if (services == null || services.Length == 0)
{
    <MudText Color="Color.Error">没有可用的代理服务</MudText>
}
else
{
    <MudTable Items="@services"
          Hover="true"
          Striped="true"
          SortLabel="Sort By"
          Filter="p => FilterFunc(p, searchString)"
          Loading="@_loading"
          LoadingProgressColor="Color.Info">
        <ToolBarContent>
            <MudButton Color="Color.Success"
                   StartIcon="@Icons.Material.Filled.Update"
                   OnClick="() => UpdateService()">
                更新代理服务
            </MudButton>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<ServiceSummaryModel, object>(x=>x.Address)">地址</MudTableSortLabel></MudTh>
            <MudTh>服务数</MudTh>
            <MudTh>运行中的服务</MudTh>
            <MudTh>标签</MudTh>
            <MudTh>系统架构</MudTh>
            <MudTh>系统名称</MudTh>
            <MudTh>Cpu</MudTh>
            <MudTh>内存</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="地址">
                <MudButton EndIcon="@Icons.Custom.Brands.MicrosoftWindows" Color="Color.Primary" OnClick="() => NavigateToServicePanelDetail(context.Address)">@context.Address</MudButton>
            </MudTd>
            <MudTd DataLabel="服务数量">@context.Count</MudTd>
            <MudTd DataLabel="运行中的服务数量">@context.RuningCount</MudTd>
            <MudTd DataLabel="标签">
                @foreach (var label in GetLabels(context.Address))
                {
                    <MudAvatar Color="Color.Primary">label</MudAvatar>
                }
                <MudIconButton Icon="@Icons.Material.Filled.NewLabel" OnClick="() => AddLabels(context)" />
            </MudTd>
            <MudTd DataLabel="系统架构">@context.OSArchitecture</MudTd>
            <MudTd DataLabel="系统名称">@context.OSDescription</MudTd>
            <MudTd DataLabel="Cpu">
                <MudButton Color="Color.Primary" OnClick="() => ShowMonitorDialog(context)">
                    @($"{(int)(context.CpuUsage * 100)} %")
                </MudButton>
            </MudTd>
            <MudTd DataLabel="内存">
                <MudButton Color="Color.Primary" OnClick="() => ShowMonitorDialog(context)">
                    @($"{(context.TotalPhysicalMemory - context.AvailableMemory) * 100 / context.TotalPhysicalMemory} %")
                </MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private bool _loading = true;
    private string searchString = "";
    private ServiceSummaryModel[] services;
    private Timer _timer;
    private List<ServiceLabel> labels;

    protected override async Task OnInitializedAsync()
    {
        services = await ControlService.GetServiceSummaries();
        labels = await ControlService.GetLabels();
        _loading = false;

        _timer = new Timer(async stateInfo =>
        {
            services = await ControlService.GetServiceSummaries();
            await InvokeAsync(StateHasChanged);
        }, new AutoResetEvent(false), 5000, 5000);
    }

    private void NavigateToServicePanelDetail(string address)
    {
        Navigation.NavigateTo($"control-panel/{address}");
    }

    private bool FilterFunc(ServiceSummaryModel element, string searchString)
    {
        if (element == null)
            return false;
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Address.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void ShowMonitorDialog(ServiceSummaryModel serviceModel)
    {
        var parameters = new DialogParameters();
        parameters.Add("ServiceModel", serviceModel);

        var options = new DialogOptions() { CloseButton = true, FullScreen = true };
        DialogService.Show<MonitorDialog>("", parameters, options);
    }

    private string[] GetLabels(string address)
    {
        return labels.Where(p => p.Address == address)
            .Select(p => p.Name)
            .Take(3)
            .ToArray();
    }

    private async Task AddLabels(ServiceSummaryModel serviceModel)
    {
        var parameters = new DialogParameters();
        parameters.Add("ServiceModel", serviceModel);

        var dialog = await DialogService.ShowAsync<LabelAddDialog>("", parameters);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var label = result.Data as ServiceLabel;
            labels.Add(label);
        }
    }

    private void UpdateService()
    {
        var parameters = new DialogParameters();
        parameters.Add("SummaryModels", services);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraLarge };
        DialogService.Show<ServiceUpdateDialog>($"更新代理服务", parameters, options);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
