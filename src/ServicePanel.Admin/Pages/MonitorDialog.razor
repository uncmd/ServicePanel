@implements IDisposable
@inject ServiceControlService ControlService

<MudDialog>
    <DialogContent>
        <MudChart 
            ChartType="ChartType.Line" 
            ChartSeries="@Series" 
            XAxisLabels="@XAxisLabels"
            Width="100%"
            Height="70vh">
        </MudChart>
@*        <MudText Align="Align.Center" Typo="Typo.h6">@($"{serviceModel.Address} {serviceModel.OSArchitecture} {serviceModel.OSDescription}")</MudText>*@
    </DialogContent>
</MudDialog>

@code {
    [Parameter]
    public MachineInfo MachineInfo { get; set; }

    const int dataLength = 15;
    private PeriodicTimer timer = new PeriodicTimer(TimeSpan.FromSeconds(3));

    public List<ChartSeries> Series;
    public string[] XAxisLabels = new string[dataLength];

    Queue<string> labels = new Queue<string>(dataLength);
    Queue<double> cpuData = new Queue<double>(dataLength);
    Queue<double> memData = new Queue<double>(dataLength);

    protected override async Task OnInitializedAsync()
    {
        var dateTime = DateTime.Now;
        for (int i = 0; i < dataLength; i++)
        {
            labels.Enqueue(dateTime.AddSeconds(5 * (dataLength - i)).ToString("mm:ss"));
            cpuData.Enqueue(0);
            memData.Enqueue(0);
        }

        XAxisLabels = labels.ToArray();
        Series = new List<ChartSeries>
        {
            new ChartSeries() { Name = "CPU使用率", Data = cpuData.ToArray() },
            new ChartSeries() { Name = "内存使用率", Data = memData.ToArray() }
        };

        await UpdateData();

        while (await timer.WaitForNextTickAsync())
        {
            await UpdateData();
        }
    }

    private async Task UpdateData()
    {
        var data = await ControlService.GetMachineInfo(MachineInfo.IP);

        var cpuUsage = Math.Ceiling((double)data.CpuUsage * 100);
        var memory = Math.Ceiling((double)((data.TotalPhysicalMemory - data.AvailableMemory) * 100 / data.TotalPhysicalMemory));
        cpuData.Dequeue();
        cpuData.Enqueue(cpuUsage);
        memData.Dequeue();
        memData.Enqueue(memory);
        labels.Dequeue();
        labels.Enqueue(DateTime.Now.ToString("mm:ss"));

        Series[0].Data = cpuData.ToArray();
        Series[1].Data = memData.ToArray();
        XAxisLabels = labels.ToArray();

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}