@implements IDisposable
@inject ServiceControlService Service
@inject IDialogService DialogService
@inject DefaultUiNotificationService UiNotificationService

<MudDialog>
    <DialogContent>
        <MudStack Style="width: 100%">
            <MudFileUpload T="IBrowserFile" Accept=".rar,.zip,7z" FilesChanged="UploadFiles" Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
                           @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
                <ButtonTemplate>
                    <MudPaper Height="100px" Outlined="true" Class="@DragClass">
                        <MudText Typo="Typo.h6">先上传压缩文件，然后单击 <code>开始更新</code></MudText>
                        @if (file != null)
                        {
                            <MudList>
                                <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@file">
                                    @file.Name <code>@(Math.Round((double)file.Size / 1024 / 1024, 2)) MB</code>
                                </MudListItem>
                            </MudList>
                        }
                    </MudPaper>
                </ButtonTemplate>
            </MudFileUpload>

            <MudPaper>
                <MudContainer Style="min-height: 40vh; max-height: 70vh; height: auto; overflow-y: scroll">
                    @foreach (var log in logs)
                    {
                        <MudText>@log</MudText>
                    }
                </MudContainer>
            </MudPaper>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="Submit" Disabled="SubmitDisabled()">开始更新</MudButton>
        <MudButton Color="Color.Info" Variant="Variant.Filled" OnClick="OpenUpdateRecordDialog">更新历史</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [Parameter] public HashSet<ServiceInfo> ServiceInfos { get; set; }
    [Parameter] public List<MachineInfo> Machines { get; set; }

    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string DragClass = DefaultDragClass;

    IBrowserFile file;
    List<string> logs = new List<string>();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        UiNotificationService.NotificationReceived += OnNotificationReceived;
    }

    private void UploadFiles(IBrowserFile file)
    {
        ClearDragClass();
        this.file = file;
        logs.Add($"{DateTime.Now} 上传文件{file.Name}");
    }

    private bool SubmitDisabled() => file == null;

    private async Task Submit()
    {
        if (file == null)
        {
            Snackbar.Add("请先上传更新文件", Severity.Error);
            return;
        }

        if (ServiceInfos != null)
        {
            await UpdateService();
        }

        if (Machines != null)
        {
            await UpdateAgent();
        }
    }

    private async Task UpdateService()
    {
        foreach (var serviceInfo in ServiceInfos)
        {
            logs.Add($"{DateTime.Now} {serviceInfo.IP} {serviceInfo.ServiceName} 开始更新");

            try
            {
                await Service.Update(serviceInfo, file);

                Snackbar.Add($"服务<b>{serviceInfo.ServiceName}</b>更新成功", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"服务<b>{serviceInfo.ServiceName}</b>更新失败：{ex.Message}", Severity.Error);
            }
        }
    }

    private async Task UpdateAgent()
    {
        foreach (var machineInfo in Machines)
        {
            var agentAddress = machineInfo.IP;

            logs.Add($"{DateTime.Now} {agentAddress} 开始更新代理");

            try
            {
                await Service.UpdateAgent(machineInfo, file);

                Snackbar.Add($"{agentAddress}代理更新成功", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"{agentAddress}代理更新失败：{ex.Message}", Severity.Error);
            }
        }
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }

    private async Task OpenUpdateRecordDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("ServiceInfos", ServiceInfos);
        parameters.Add("Machines", Machines);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraLarge };
        var dialog = DialogService.Show<UpdateRecordDialog>("", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled && result.Data is UpdateEntity updateEntity)
        {
            logs.Add($"{DateTime.Now} 服务{updateEntity.ServiceName}开始执行回滚操作，回滚到版本：{updateEntity.Version}");
            await Service.Rollback(updateEntity);
            logs.Add($"{DateTime.Now} 服务{updateEntity.ServiceName}回滚到版本：{updateEntity.Version}成功");
        }
    }

    private async void OnNotificationReceived(object sender, UiNotificationEventArgs e)
    {
        logs.Add(e.Message);
        await InvokeAsync(() => StateHasChanged());
    }

    public virtual void Dispose()
    {
        if (UiNotificationService != null)
        {
            UiNotificationService.NotificationReceived -= OnNotificationReceived;
        }
    }
}