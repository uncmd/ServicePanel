@using Orleans.Runtime
@using ServicePanel.Grains
@implements IChat
@inject ServiceControlService Service
@inject IClusterClient client

<MudDialog>
    <DialogContent>
        <MudStack Style="width: 100%">
            <MudFileUpload T="IBrowserFile" Accept=".rar,.zip,7z" FilesChanged="UploadFiles" Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
                           @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
                <ButtonTemplate>
                    <MudPaper Height="100px" Outlined="true" Class="@DragClass">
                        <MudText Typo="Typo.h6">先上传压缩文件，然后单击 <code>开始更新</code> 来更新服务</MudText>
                        @if (file != null)
                        {
                            <MudList>
                                <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@file">
                                    @file.Name <code>@(Math.Round((double)file.Size / 1024 / 1024, 2)) MB</code>
                                </MudListItem>
                            </MudList>
                        }
                    </MudPaper>
                </ButtonTemplate>
            </MudFileUpload>

            <MudPaper>
                <MudContainer Style="min-height: 40vh; max-height: 70vh; height: auto; overflow-y: scroll">
                    @foreach (var log in logs)
                    {
                        <MudText>@log</MudText>
                    }
                </MudContainer>
            </MudPaper>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="Submit" Disabled="SubmitDisabled()">开始更新</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [Parameter]
    public ServiceModel serviceModel { get; set; }

    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string DragClass = DefaultDragClass;

    IBrowserFile file;
    List<string> logs = new List<string>();
    IChat chatReference;
    IUpdatorGrain updatorGrain;

    private void UploadFiles(IBrowserFile file)
    {
        ClearDragClass();
        this.file = file;
        logs.Add($"{DateTime.Now} 上传文件{file.Name}");
    }

    private bool SubmitDisabled()
    {
        return file == null;
    }

    private async Task Submit()
    {
        if (file == null)
        {
            Snackbar.Add("请先上传更新文件", Severity.Error);
            return;
        }

        logs.Add($"{DateTime.Now} {serviceModel.Address} 开始更新服务: {serviceModel.ServiceName}");

        await SubMessage();

        try
        {
            await Service.Update(serviceModel, file);

            Snackbar.Add($"服务<b>{serviceModel.ServiceName}</b>更新成功", Severity.Success);
        }
        finally
        {
            await UnSubscribe();
        }
    }

    private async Task SubMessage()
    {
        updatorGrain = client.GetGrain<IUpdatorGrain>(serviceModel.Address);
        chatReference = client.CreateObjectReference<IChat>(this);
        await updatorGrain.Subscribe(chatReference);
    }

    private async Task UnSubscribe()
    {
        await updatorGrain.UnSubscribe(chatReference);
    }

    public async Task ReceiveMessage(string message)
    {
        logs.Add(message);
        await InvokeAsync(() => StateHasChanged());
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }
}