@using Orleans.Runtime
@using ServicePanel.Grains
@implements IChat
@inject ServiceControlService Service
@inject IClusterClient client

<MudDialog>
    <DialogContent>
        <MudContainer Style="min-height: 40vh; max-height: 70vh; height: auto; overflow-y: scroll">
            <MudText>先上传压缩文件，然后点击开始更新来更新服务</MudText>
            @foreach (var log in logs)
            {
                <MudText>@log</MudText>
            }
        </MudContainer>

        @if (file != null)
        {
            <MudList>
                <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@file">
                    @file.Name <code>@(Math.Round((double)file.Size / 1024 / 1024, 2)) MB</code>
                </MudListItem>
            </MudList>
        }
    </DialogContent>
    <DialogActions>
        <MudFileUpload T="IBrowserFile" Accept=".rar,.zip,7z" FilesChanged="UploadFiles">
            <ButtonTemplate>
                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.CloudUpload"
                           for="@context">
                    上传更新文件
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>
        <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="Submit" Disabled="SubmitDisabled()">开始更新</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [Parameter]
    public ServiceModel serviceModel { get; set; }

    IBrowserFile file;
    List<string> logs = new List<string>();
    IChat chatReference;
    IUpdatorGrain updatorGrain;

    private void UploadFiles(IBrowserFile file)
    {
        this.file = file;
        logs.Add($"{DateTime.Now} 上传文件{file.Name}");
    }

    private bool SubmitDisabled()
    {
        return file == null;
    }

    private async Task Submit()
    {
        if (file == null)
        {
            Snackbar.Add("请先上传更新文件", Severity.Error);
            return;
        }

        logs.Add($"{DateTime.Now} {serviceModel.Address} 开始更新服务: {serviceModel.ServiceName}");

        await SubMessage();

        await Service.Update(serviceModel, file);

        Snackbar.Add("服务更新成功", Severity.Success);

        await UnSubscribe();
    }

    private async Task SubMessage()
    {
        updatorGrain = client.GetGrain<IUpdatorGrain>(serviceModel.Address);
        chatReference = client.CreateObjectReference<IChat>(this);
        await updatorGrain.Subscribe(chatReference);
    }

    private async Task UnSubscribe()
    {
        await updatorGrain.UnSubscribe(chatReference);
    }

    public async Task ReceiveMessage(string message)
    {
        logs.Add(message);
        await InvokeAsync(() => StateHasChanged());
    }
}